<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+github博客搭建</title>
    <url>/2020/05/08/hello-world/</url>
    <content><![CDATA[<p>&emsp;&emsp;hexo是一个博客框架，可以将markdown文本编译成静态网页。github提供了github pages,这是一个静态网站托管服务。所以前者生成的静态网页可以托管在github pages上。通过在网上搜索，发现<a href="https://cuiqingcai.com/7625.html" target="_blank" rel="noopener">这篇文章</a>写的很详细，根据这篇文章部署了该<a href="https://wdxx.github.io/" target="_blank" rel="noopener">博客网站</a>。</p>
<a id="more"></a>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>&emsp;&emsp;搭建前需要先安装好Node.js，可以通过<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">这里</a>下载安装。然后就是安装hexo与github pages创建。需要注意的是在申请github作为github pages的仓库时，仓库名需要是{name}.github.io的命名方式。如果你还没有github账户的话赶紧去<a href="https://github.com/" target="_blank" rel="noopener">官网</a>申请一个吧。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>安装命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>&emsp;&emsp;到目前为止，我们的准备工作已经完成了，我们拥有了hexo框架，github仓库。接下来需要做的就是使用hexo来初始化一个博客项目，hexo提供了一个命令行工具，用于快速创建项目、页面、编译、部署hexo博客。创建博客项目的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir myblogsite</span><br><span class="line"><span class="built_in">cd</span> myblogsite</span><br><span class="line">hexo init &#123;name&#125; <span class="comment">## name就是你要创建的项目的名字，一般取签名说的github的用户名就可以了。</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这个步骤中hexo为我们的博客项目创建了{name}文件夹，这个文件夹下面还有node_modules、scaffolds、themes等文件夹，先不管这些文件夹有啥作用，继续后面的步骤。我{name}文件夹下面可以看到一个source/_post文件夹，这个下面可以存放markdown个是的文本文件，hexo可以将这个文件编译成静态的html,然后我们就可以用来部署了。将markdown格式的文件编译成html的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;name&#125;</span><br><span class="line">hexo generate <span class="comment">## 也可以使用  hexo g 命令</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;执行上面的命令后可以发现在{name}/public下生成了许多文件，这就是转换过程重生成的文件。可以通过如下的命令在本地调试查看生成的效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在上面的命令执行完成后，如果服务启动正常，那么会打印如下的log：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;可以看到，访问的地址为”<a href="http://localhost:4000&quot;，在浏览器中打开就可以看到效果了。">http://localhost:4000&quot;，在浏览器中打开就可以看到效果了。</a></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>&emsp;&emsp;从上面的步骤中已经生成了静态的页面，接下来只需要部署到github就可以了。在部署之前需要安装一个git的部署插件，安装命令如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;接下来需要配置部署地址。打开项目文件夹下面的”_config.yml”文件，找到”Deployment”配置项，配置成如下格式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/wdxx/wdxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;将type配置成git,repo配置成github项目地址，branch配置成github仓库分支。配置完地址之后执行如下部署命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>部署过程会上传编译好的结果，log如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Counting objects: 58, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (52/52), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (58/58), 358.87 KiB | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 58 (delta 8), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (8/8), <span class="keyword">done</span>.</span><br><span class="line">To https://github.com/wdxx/wdxx.github.io.git</span><br><span class="line">   3cd02f7..13b140e  HEAD -&gt; master</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from https://github.com/wdxx/wdxx.github.io.git.</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;现在就可以打开<a href="https://wdxx.github.io/" target="_blank" rel="noopener">https://wdxx.github.io/</a>看看部署好后的效果了。</p>
<h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>&emsp;&emsp;hexo提供了各种各样的主题用于定义自己喜欢的样式，一般使用最流行的<a href="https://github.com/theme-next/hexo-theme-next/tree/v7.8.0" target="_blank" rel="noopener">next</a>主题，主题需要自己单独下载，存放在工程的themes目录下。下载next的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;下载完主题后，需要在工程目录的”_config.yml”中将主题切换为next,在该文件中找到”Extensions”字段，配置成如下格式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h2><p>&emsp;&emsp;在修改完配置，或者新发布文章后，需要重新编译然后部署，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h2><p>&emsp;&emsp;可以在 _config.yml 中修改大部分的配置。这里我们主要修改site区域的配置。各参数说明如下:  </p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">title</td>
<td align="right">网站标题</td>
</tr>
<tr>
<td align="left">subtitle</td>
<td align="right">网站副标题</td>
</tr>
<tr>
<td align="left">description</td>
<td align="right">网站描述</td>
</tr>
<tr>
<td align="left">keywords</td>
<td align="right">网站的关键词。使用半角逗号 , 分隔多个关键词</td>
</tr>
<tr>
<td align="left">author</td>
<td align="right">您的名字</td>
</tr>
<tr>
<td align="left">language</td>
<td align="right">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td>
</tr>
<tr>
<td align="left">timezone</td>
<td align="right">网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td>
</tr>
</tbody></table>
<p>我的博客具体配置如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: wdxxliu</span><br><span class="line">subtitle: 个人博客</span><br><span class="line">description: 一个关于嵌入式方向的个人博客</span><br><span class="line">keywords: <span class="string">"Python C/C++ Makefile Linux 编译 工具链"</span></span><br><span class="line">author: wdxx</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>android simpleperf工具使用入门</title>
    <url>/2020/05/15/android-simpleperf/</url>
    <content><![CDATA[<p>&emsp;&emsp;Simpleperf 是一个通用的命令行 CPU 性能剖析工具，在Android NDK中已经自带了。需要注意的是，如果自带的simpleperf不能使用，就需要在适配当前Android设备的源码中编译了。simpleperf的源码在AOSP的system/extras/simpleperf下，其中doc目录详细介绍了如何使用该工具。</p>
<a id="more"></a>

<h2 id="在源码中编译simpleperf"><a href="#在源码中编译simpleperf" class="headerlink" title="在源码中编译simpleperf"></a>在源码中编译simpleperf</h2><p>&emsp;&emsp;可以通过如下命令在Andorid设备的源码中编译simpleperf:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">lunch aosp_arm64-eng</span><br><span class="line">make simpleperf -j32</span><br></pre></td></tr></table></figure>
<p>最后将会生成out/target/product/xxx/system/xbin/simpleperf，这就是需要push到Android设备的simpleperf。</p>
<h3 id="push-simpleperf"><a href="#push-simpleperf" class="headerlink" title="push simpleperf"></a>push simpleperf</h3><p>&emsp;&emsp;在push之前需要需要保证Android设备具有root权限，一般通过adb root选项进行提权。然后通过如下命令将simpleperf push到设备。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell mkdir /data/bin</span><br><span class="line">adb push &lt;编译出来的simpleperf&gt; /data/bin/simpleperf</span><br><span class="line">adb shell setenforce 0</span><br></pre></td></tr></table></figure>
<p>进行了上述步骤后，就可以在设备中使用simpleperf了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell /data/bin/simpleperf --version</span><br><span class="line"><span class="comment"># simpleperf I command.cpp:131] Simpleperf version 1.c65e6065befd</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="simpleperf使用介绍"><a href="#simpleperf使用介绍" class="headerlink" title="simpleperf使用介绍"></a>simpleperf使用介绍</h2><p>&emsp;&emsp;simpleperf的record命令用于转储已需要分析的进程的样本。 每个样本可以包含诸如样本生成时间，自上一个样本以来的事件数，线程的程序计数器，线程的调用链之类的信息。后续的分析步骤都是基于这个样本信息来分析的。</p>
<h3 id="采集样本数据"><a href="#采集样本数据" class="headerlink" title="采集样本数据"></a>采集样本数据</h3><p>首先确认需要分析的进程。比如分析当前cpu占用最高的进程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -m 5 <span class="comment"># 得到执行的进程名字</span></span><br><span class="line"><span class="comment">## 根据pidof得到需要分析的进程id号</span></span><br><span class="line">pidof &lt;进程名&gt;</span><br></pre></td></tr></table></figure>
<p>得到进程id后就可以进行数据采集了。如果使用simpleperf的recod命令请参<a href="https://android.googlesource.com/platform/system/extras/+/refs/heads/master/simpleperf/doc/executable_commands_reference.md" target="_blank" rel="noopener">考官方文档</a>中的<code>The record command</code>小节。<br>如下的命令记录进行号为11961的record：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/data/bin/simpleperf record -p 11961 -o /sdcard/perf_11961.data --duration 360</span><br></pre></td></tr></table></figure>
<p>结果保存在/sdcard/perf_11961.data,记录持续时间为360秒。这里只记录了默认的<code>cpu-cycles</code>event，如果需要记录更加多的event需要指定-e参数。通过<code>simpleperf list</code>命令查看支持哪些events。</p>
<h3 id="查看特定进程调用的动态库"><a href="#查看特定进程调用的动态库" class="headerlink" title="查看特定进程调用的动态库"></a>查看特定进程调用的动态库</h3><p>通过report命令可以查看这种report数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./simpleperf report --sort dso -i /sdcard/perf_11961.data</span><br><span class="line">simpleperf W dso.cpp:361] failed to <span class="built_in">read</span> symbols from [vdso]: File not found</span><br><span class="line">Cmdline: /data/bin/simpleperf record -p 11961 -o /sdcard/perf_11961.data --duration 360</span><br><span class="line">Arch: arm64</span><br><span class="line">Event: cpu-cycles (<span class="built_in">type</span> 0, config 0)</span><br><span class="line">Samples: 649</span><br><span class="line">Event count: 136430910</span><br><span class="line"></span><br><span class="line">Overhead  Shared Object</span><br><span class="line">57.91%    [kernel.kallsyms]</span><br><span class="line">20.03%    /system/lib64/libart.so</span><br><span class="line">9.43%     /system/lib64/libandroidfw.so</span><br><span class="line">5.05%     /system/framework/arm64/boot-framework.oat</span><br><span class="line">3.58%     /system/lib64/libc.so</span><br><span class="line">1.67%     /system/framework/arm64/boot-core-oj.oat</span><br><span class="line">0.89%     /system/lib64/libbinder.so</span><br><span class="line">0.39%     /system/lib64/libc++.so</span><br><span class="line">0.38%     /system/lib64/libopenjdk.so</span><br><span class="line">0.27%     /system/lib64/libz.so</span><br><span class="line">0.15%     /system/lib64/libandroid_runtime.so</span><br><span class="line">0.13%     [vdso]</span><br><span class="line">0.07%     /system/framework/arm64/boot-core-libart.oat</span><br><span class="line">0.05%     /system/lib64/libutils.so</span><br></pre></td></tr></table></figure>

<h3 id="查看函数调用关系"><a href="#查看函数调用关系" class="headerlink" title="查看函数调用关系"></a>查看函数调用关系</h3><p>simpleperf report还可以导出函数调用关系,–symfs可以指定符号表的目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/data/bin/simpleperf report -g  -i /sdcard/perf_19357.data --symfs . &gt; /sdcard/g_19357.dat</span><br></pre></td></tr></table></figure>

<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ol>
<li><a href="https://blog.csdn.net/zhuyong006/article/details/103112571" target="_blank" rel="noopener">https://blog.csdn.net/zhuyong006/article/details/103112571</a></li>
<li><a href="https://developer.android.com/ndk/guides/simpleperf" target="_blank" rel="noopener">https://developer.android.com/ndk/guides/simpleperf</a></li>
</ol>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解压android系统镜像</title>
    <url>/2020/05/18/unpack-filesystem-data/</url>
    <content><![CDATA[<p>&emsp;&emsp;在android的开发过程中，经常需要用到将andorid system.img 或者 vendor.img等ext文件系统格式的镜像给解压出来分析，如果当前Linux系统有root权限，那么可以直接mount 镜像来进行提取，但是一般开发服务器是不提供root权限的，所以本文讨论如何在没有root权限的情况下对文件系统镜像进行提取。以AndroidQ super.img为例进行说明。</p>
<a id="more"></a>

<h2 id="super-img"><a href="#super-img" class="headerlink" title="super.img"></a>super.img</h2><p>&emsp;&emsp;super.img是AndroidQ引入的，用于处理动态分区特性。例如将system、vendor<br>、product分区定义为动态分区，那么编译完成时这三个分区的镜像就会合并成一个super.img镜像，当然也能将super.img拆分成system.img、vendor.img、product.img镜像。</p>
<h3 id="如何拆分super-img"><a href="#如何拆分super-img" class="headerlink" title="如何拆分super.img"></a>如何拆分super.img</h3><p>&emsp;&emsp;Android Q 自带了lpunpack工具来对super.img进行解压。下面是lpunpack的使用介绍。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./lpunpack - <span class="built_in">command</span>-line tool <span class="keyword">for</span> extracting partition images from super</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  ./lpunpack [options...] SUPER_IMAGE [OUTPUT_DIR]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --partition=NAME     Extract the named partition. This can</span><br><span class="line">                           be specified multiple <span class="built_in">times</span>.</span><br><span class="line">  -S, --slot=NUM           Slot number (default is 0).</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;例如：<code>lpunpack super.img</code>默认会将所有的分区文件提取出来，可以通过-p选择提取指定的分区镜像。需要注意的是，lpunpack工具aosp代码默认不会编译，可以通过将lpunpack加入PRODUCT_HOST_PACKAGES，然后编译，源码在aosp源码的system/extras/partition_tools目录。<br>&emsp;&emsp;aosp源码的system/extras/partition_tools目录下面还有几个常用工具，一起介绍下。<br>lpmake：用于生成一个super.img文件，具体使用方法可以通过<code>lpmake -h</code>查看。<br>lpdump：用于dump一个super.img文件中包含哪些分区等元数据。<br>lpflash：用于烧录镜像到设备，<code>Usage: lpflash /dev/block/sdX /path/to/image/file</code>。</p>
<h2 id="如何拆分system-img"><a href="#如何拆分system-img" class="headerlink" title="如何拆分system.img"></a>如何拆分system.img</h2><p>&emsp;&emsp;通过上个步骤的lpunpack后，会得到system.img.如果system.img镜像的格式是sparse格式的（super.img解压后的不需要这个步骤，已经是raw格式的了），需要将其转换为raw格式，转换工具为<code>simg2img</code>，在aosp编译后的out/host/linux-x86/bin目录，转换命令如下:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">simg2img system.img  system.img.raw</span><br></pre></td></tr></table></figure>
<p>system.img一般为ext文件系统，这里以ext文件系统解压作为讲解。最常用的方法就是使用e2fsprogs中的debugfs了。比如想将system.img中的内容解压到system目录，使用debugfs的命令如下:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir system</span><br><span class="line">debugfs system.img  -R <span class="string">"rdump / system"</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;还有一种方法是使用nlitsme提供的extfstools工具，在github上有下载该工具的源码。但是extfstools依赖c++17与boost库，所以需要先编译gcc 6以上的版本与boost库。</p>
<h3 id="编译gcc"><a href="#编译gcc" class="headerlink" title="编译gcc"></a>编译gcc</h3><p>&emsp;&emsp;在gcc 6以上的对c++17的特性支持比较全，关于gcc对c++版本的支持查看<a href="https://zh.cppreference.com/w/cpp/compiler_support" target="_blank" rel="noopener">这里</a>。所以选取了gcc-6.2.0，下载地址点<a href="https://ftp.gnu.org/gnu/gcc/gcc-6.2.0/gcc-6.2.0.tar.bz2" target="_blank" rel="noopener">这里</a>。  </p>
<ol>
<li>配置gcc  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build install</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">../$(gcc-source-scode-dir)/configure --prefix=&lt;install目录的绝对路径&gt; --<span class="built_in">enable</span>-languages=c,c++</span><br></pre></td></tr></table></figure>
执行上面步骤的时候可能会出现如下报错:  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checking for objdir... .libs</span><br><span class="line">checking for the correct version of gmp.h... no</span><br><span class="line">configure: error: Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+.</span><br><span class="line">Try the --with-gmp, --with-mpfr and&#x2F;or --with-mpc options to specify</span><br><span class="line">their locations.  Source code for these libraries can be found at</span><br><span class="line">their respective hosting sites as well as at</span><br><span class="line">ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;.  See also</span><br><span class="line">http:&#x2F;&#x2F;gcc.gnu.org&#x2F;install&#x2F;prerequisites.html for additional info.  If</span><br><span class="line">you obtained GMP, MPFR and&#x2F;or MPC from a vendor distribution package,</span><br><span class="line">make sure that you have installed both the libraries and the header</span><br><span class="line">files.  They may be located in separate packages.</span><br></pre></td></tr></table></figure>
解决方法是到gcc源码目录执行<code>./contrib/download_prerequisites</code>，然后重新配置gcc。</li>
<li>编译与安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j32</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="编译boost"><a href="#编译boost" class="headerlink" title="编译boost"></a>编译boost</h3><p>&emsp;&emsp;boost的新版本下载地址请点击<a href="https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.bz2" target="_blank" rel="noopener">这里</a>。关于新手怎么使用boost可以查看<a href="https://www.boost.org/doc/libs/1_73_0/more/getting_started/unix-variants.html" target="_blank" rel="noopener">官方文档</a>。</p>
<ol>
<li>配置boost  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;bost_source_dir&gt;</span><br><span class="line">mkdir install</span><br><span class="line">./bootstrap.sh --with-toolset=gcc --prefix=&lt;Absolute address <span class="keyword">for</span> bost_source_dir&gt;/install --with-libraries=all</span><br></pre></td></tr></table></figure></li>
<li>编译与安装  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./b2 install</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="编译extfstools"><a href="#编译extfstools" class="headerlink" title="编译extfstools"></a>编译extfstools</h3><p>&emsp;&emsp;extfstools可以通过git命令从github<a href="https://github.com/nlitsme/extfstools.git" target="_blank" rel="noopener">地址</a>下载。由于我们的gcc与boost是安装的自定义目录，没有安装到系统目录，所以需要修改extfstools/Makefile来指定环境变量。在<code>CXXFLAGS</code>中加入<code>-I &lt;Absolute address for bost_source_dir&gt;/install/include</code>,在<code>LDFLAGS</code>中添加<code>-Wl,-rpath,&#39;$$ORIGIN/lib64&#39;</code>。这里修改链接选项的目的是使用我们新编译的gcc库。  </p>
<ol>
<li><p>拷贝gcc标准库  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;extfstools <span class="built_in">source</span> dir&gt;</span><br><span class="line">mkdir lib64</span><br><span class="line"><span class="built_in">cd</span> lib64</span><br><span class="line">cp &lt;gcc install path&gt;/libgcc_s.so.1 libgcc_s.so.1</span><br><span class="line">cp &lt;gcc install path&gt;/libstdc++.so.6.0.22 libstdc++.so.6.0.22</span><br><span class="line">ln -s libstdc++.so.6.0.22 libstdc++.so.6</span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CXX=&lt;gcc install path&gt;/g++ make clean</span><br><span class="line">CXX=&lt;gcc install path&gt;/g++ make -j32</span><br></pre></td></tr></table></figure>
<p>编译完成后，执行<code>./ext2rd --help</code>会打印如果使用说明：<br><img src="/images/ext2rd_help.png" alt=""><br>解压system.img:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ext2rd system.img  ./:system</span><br></pre></td></tr></table></figure>
<p>解压效果如下图:<br><img src="/images/system_filelist.png" alt=""></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>android filesystem</tag>
      </tags>
  </entry>
</search>
